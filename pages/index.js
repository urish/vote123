import { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth';
import { collection, doc, getFirestore, updateDoc } from 'firebase/firestore';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import {
  AuthProvider,
  FirestoreProvider,
  useAuth,
  useFirebaseApp,
  useFirestore,
  useFirestoreCollectionData,
  useUser,
} from 'reactfire';
import styles from '../styles/Home.module.css';

const features = [{ name: 'Magic smoke' }];

function UserInfo() {
  const auth = useAuth();
  const { data: user } = useUser();

  if (!user) {
    return <button onClick={() => signInWithPopup(auth, new GoogleAuthProvider())}>Sign in</button>;
  }

  return (
    <div>
      <div>Welcome, {user.displayName}</div>
      <img src={user.photoURL} alt={user.displayName} />
      <button onClick={() => signOut(auth)}>Log out</button>
    </div>
  );
}

function FeatureItem({ feature }) {
  const { data: user } = useUser();
  const firestore = useFirestore();
  const featuresCollection = collection(firestore, 'features');
  const votes = feature.votes ?? [];
  const voted = user && votes.includes(user.uid);

  const vote = (feature) => {
    updateDoc(doc(featuresCollection, feature.id), {
      votes: [...votes, user.uid],
    });
  };
  const unvote = (feature) => {
    updateDoc(doc(featuresCollection, feature.id), {
      votes: votes.filter((item) => item !== user.uid),
    });
  };

  return (
    <div>
      {feature.title}
      Votes: {feature.votes?.length ?? 0}
      {user && !voted && <button onClick={() => vote(feature)}>Vote</button>}
      {user && voted && <button onClick={() => unvote(feature)}>Unvote</button>}
    </div>
  );
}

function VoteList() {
  const firestore = useFirestore();
  const featuresCollection = collection(firestore, 'features');
  const { status, data: features } = useFirestoreCollectionData(featuresCollection, {
    idField: 'id',
  });

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  return (
    <ul>
      {features.map((feature) => (
        <li key={feature.id}>
          <FeatureItem feature={feature} />
        </li>
      ))}
    </ul>
  );
}

export default function Home() {
  const app = useFirebaseApp();
  const [ready, setReady] = useState(false);

  useEffect(() => setReady(true), []);
  return (
    <AuthProvider sdk={getAuth(app)}>
      <FirestoreProvider sdk={getFirestore(app)}>
        <div className={styles.container}>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <main className={styles.main}>
            <h1 className={styles.title}>Voting for Features!</h1>

            <UserInfo />
            {ready && <VoteList />}
          </main>
        </div>
      </FirestoreProvider>
    </AuthProvider>
  );
}
